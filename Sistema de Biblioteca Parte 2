// PRÁTICA: SISTEMA DE BIBLIOTECA - PARTE 2
//
// OBJETIVO DESTA PARTE:
// Adicionar a funcionalidade de empréstimo e introduzir alocação dinâmica.
// Os arrays de livros e empréstimos são alocados com malloc/calloc.
// Nova struct para Empréstimo.
// Liberação de memória com a função: free
// ===================================================================================

#include <stdio.h>
#include <stdlib.h>
#include <string.h> // Para funções com string

// --- Constantes Globais ---
#define MAX_LIVROS 50
#define MAX_EMPRESTIMOS 100 // Definimos uma capacidade para empréstimos.
#define TAM_STRING 100

// --- Definição da Estruturas (Struct) ---
// struct Livro, agora tem um campo 'disponível' para controlar o status.

typedef struct {
    char nome[TAM_STRING];
    char autor[TAM_STRING];
    char editora[TAM_STRING];
    int edicao;
    int disponivel; // 1 para sim, 0 para não.
} Livro;

typedef struct {
    int indiceLivro; // PAra saber qual livro do array 'biblioteca' foi emprestado.
    char nomeUsuario[TAM_STRING];
} Emprestimo;

// --- Função para limpar o buffer de entrada ---
void limparBufferEntrada() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

// --- Função Principal (main) ---
int main() {
// 1. ALOCAÇÃO DINÂMICA DE MEMÓRIA
// Agora, em vez de arrays estáticos, usaremos ponteiros.
    Livro *biblioteca; 
    Emprestimo *emprestimos;

// Usamos calloc para o array de livros. calloc(num_elementos, tamanho_de_cada_elemento)
// Vantagem: Inicializa toda a memória com zeros. Isso significa que 'disponível' já começa
// com zero
biblioteca = (Livro *) calloc(MAX_LIVROS, sizeof(Livro));

// Usamos malloc para o array de empréstimos. malloc(tamanho_total_em_bytes0
emprestimos = (Emprestimo *) malloc(MAX_EMPRESTIMOS * sizeof(Emprestimo));

// Verificação: É crucial verificar se a alocação de memória deu certo.
if (biblioteca == NULL || emprestimos == NULL) {
    printf("Erro: Falha ao alocar memoria.\n");
    return 1; // Retorna 1 para indicar um erro.
}

int totalLivros = 0;
int totalEmprestimos = 0;
int opcao;

    // --- Laço Principal do Menu ---
    do {
        // Exibe o menu de opções
        printf("================================\n");
        printf("    BIBLIOTECA - PARTE 2\n");
        printf("================================\n");
        printf("1 - Cadastrar novo livro\n");
        printf("2 - Listar todos os livros\n");
        printf("3 - Realizar emprestimo\n");
        printf("4 - Listar emprestimos\n");
        printf("0 - Sair\n");
        printf("--------------------------------\n");
        printf("Escolha uma opcao: ");

        // Lê a opção do usuário
        scanf("%d", &opcao);
        limparBufferEntrada(); // Limpa o '\n' deixado pelo scanf

        // --- Processamento da Opção ---
        switch (opcao) {
            case 1: // CADASTRO DE LIVRO
                printf("--- Cadastro de Novo Livro ---\n\n");
                if (totalLivros < MAX_LIVROS) {
                    // O acesso aos campos é igual ao do array estático.
                    printf("Digite o nome do livro: ");
                    fgets(biblioteca[totalLivros].nome, TAM_STRING, stdin);

                   // --- (Demais leituras são iguais à Parte 1) ---
                    printf("Digite o autor: ");
                    fgets(biblioteca[totalLivros].autor, TAM_STRING, stdin);
                    printf("Digite a editora: ");
                    fgets(biblioteca[totalLivros].editora, TAM_STRING, stdin);

                    // Remove o '\n' do final das strings lidas pelo fgets
                    biblioteca[totalLivros].nome[strcspn(biblioteca[totalLivros].nome, "\n")] = '\0';
                    biblioteca[totalLivros].autor[strcspn(biblioteca[totalLivros].autor, "\n")] = '\0';
                    biblioteca[totalLivros].editora[strcspn(biblioteca[totalLivros].editora, "\n")] = '\0';

                    printf("Digite a edicao: ");
                    scanf("%d", &biblioteca[totalLivros].edicao);
                    limparBufferEntrada(); 

                    totalLivros++; // Incrementa o contador de livros cadastrados

                    printf("\nLivro cadastrado com sucesso!\n");
                } else {
                    printf("Biblioteca cheia! Nao e possivel cadastrar mais livros.\n");
                }

                printf("\nPressione Enter para continuar...");
                getchar(); // Pausa para o usuário ler a mensagem antes de voltar ao menu
                break;

            case 2: // LISTAGEM DE LIVROS
                printf("--- Lista de Livros Cadastrados ---\n\n");

                if (totalLivros == 0) {
                    printf("Nenhum livro cadastrado ainda.\n");
                } else {
                    int i; // Declara a variável de controle do for
                    for (i = 0; i < totalLivros; i++) {
                        printf("-----------------------------------\n");
                        printf("LIVRO %d\n", i + 1);
                        printf("Nome: %s\n", biblioteca[i].nome);
                        printf("Autor: %s\n", biblioteca[i].autor);
                        printf("Editora: %s\n", biblioteca[i].editora);
                        printf("Edicao: %d\n", biblioteca[i].edicao);
                    }
                    printf("------------------------------------\n");
                }

                // Pausa para o usuário visualizar a lista
                printf("\nPressione Enter para continuar...");
                getchar();
                break;

             case 3: // REALIZAR EMPRÉSTIMO
                 printf("--- Realizar Emprestimo --- \n\n");

                 if (totalEmprestimos >= MAX_EMPRESTIMOS) {
                     printf("Limite de emprestimos atingido!\n");
                 } else { 
                     printf("Livros dispóníveis:\n");
                     int disponiveis = 0;
                     int i; // Declara a variável de controle do for
                     for (i = 0; i < totalLivros; i++) {
                          if(biblioteca[i].disponivel) {
                             printf("%d - s%\n", i + 1, biblioteca[i].nome);
                             disponiveis++;
                          }
                 }

                 if (disponiveis == 0) {
                     printf("Nenhum livro disponivel para emprestimo.\n");
                 } else {
                     printf("\nDigite o numero do livro que deseja emprestar: ");
                     int numLivro;
                     scanf("%d", &numLivro);
                     limparBufferEntrada();
                     int indice = numLivro -1; // Converte para o índice do array (0 a N-1).

                     // Validação da ecolha do usuário:
                     if (indice >= 0 && indice < totalLivros && biblioteca[indice].disponivel) {
                         printf("Digite o nome do usuario que esta pegando o livro: ");
                         fgets(emprestimos[totalEmprestimos].nomeUsuario, TAM_STRING, stdin);
                         emprestimos[totalEmprestimos].nomeUsuario[strcspn(emprestimos[totalEmprestimos].nomeUsuario, "\n")] = '\0';
                        
                         // Registra o empréstimo.
                         emprestimos[totalEmprestimos].indiceLivro = indice;

                         // Atualiza o status do livro para indisponível.
                         biblioteca[indice].disponivel = 0;

                         totalEmprestimos++;
                         printf("\Emprestimo realizado com sucesso"\n");
                     } else {
                         printf("\nNumero de livro invalido ou livro indisponivel.\n");
                     }
                  }
              }

              printf("\n Pressione Enter para continuar...");
              getchar();
              break;

             case 4: // LISTAR EMPRÉSTIMOS
                 printf("--- lista de Emprestimos ---\n\n");
                 if(totalEmprestimos == 0) {
                    printf("Nenhum emprestimo realizado.\n");
                 } else {
                     int i;
                     for(i = 0; i < totalEmprestimos; i++) {
                        // Usa o índice armazenado no empréstimo para buscar o nome do livro.
                        int indiceLivro = emprestimos[i].indiceLivro;
                        printf("-----------------------------------\n");
                        printf("EMPRESTIMO %d\n", i + 1);
                        printf("Livro: %s\n", biblioteca[indiceLivro].nome);
                        printf("Usuario: %s\n", emprestimos[i].nomeUsuario);
                     }
                     printf("----------------------------------\n");
                 }
                 printf("\n Pressione Enter para continuar...");
                 getchar();
                 break;

             case 0: // SAIR
                 printf("\nSaindo do sistema...\n");
                 break;

             default: // OPÇÃO INVÁLIDA
                 printf("\nOpcao invalida, Tente novamente.\n");
                 printf("\nPressione Enter para continuar...");
                 getchar();
                 break;
        }

    } while (opcao != 0); // Continua o menu até o usuário escolher sair

    // 2. LIBERAÇÃO DA MEMÓRIA
    // Antes de terminar, é ESSENCIAL liberar a memória que foi alocada dinamicamente.
    // Isso evita "memory leaks" (Vazamentos de memória).

    free(biblioteca);
    free(emprestimos);

    printf("Memoria liberada com sucesso.\n");
          
    return 0;
}
